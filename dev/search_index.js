var documenterSearchIndex = {"docs":
[{"location":"functions.html#Normalizations","page":"Functions","title":"Normalizations","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"    Normalizations.norm_01!","category":"page"},{"location":"functions.html#FluxExtra.Normalizations.norm_01!","page":"Functions","title":"FluxExtra.Normalizations.norm_01!","text":"norm_01!(data::T,min_vals::T, max_vals::T) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nRescales each feature (last dimension) to be in the range [0,1].\n\n\n\n\n\nnorm_01!(data::Vector{T}) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nRescales each feature (last dimension) to be in the range [0,1]. Returns min and max values for each feature.\n\n\n\n\n\n","category":"function"},{"location":"functions.html","page":"Functions","title":"Functions","text":"    Normalizations.norm_negpos1!","category":"page"},{"location":"functions.html#FluxExtra.Normalizations.norm_negpos1!","page":"Functions","title":"FluxExtra.Normalizations.norm_negpos1!","text":"norm_negpos1(data::T,min_vals::T,max_vals::T) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nRescales each feature (last dimension) to be in the range [-1,1].\n\n\n\n\n\nnorm_negpos1(data::Vector{T}) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nRescales each feature (last dimension) to be in the range [-1,1]. Returns min and max values for each feature.\n\n\n\n\n\n","category":"function"},{"location":"functions.html","page":"Functions","title":"Functions","text":"    Normalizations.norm_zerocenter!","category":"page"},{"location":"functions.html#FluxExtra.Normalizations.norm_zerocenter!","page":"Functions","title":"FluxExtra.Normalizations.norm_zerocenter!","text":"norm_zerocenter!(data::T,mean_vals::T) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nSubtracts the mean of each feature (last dimension).\n\n\n\n\n\nnorm_zerocenter!(data::Vector{T}) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nSubtracts the mean of each feature (last dimension). Returns a mean value for each feature.\n\n\n\n\n\n","category":"function"},{"location":"functions.html","page":"Functions","title":"Functions","text":"    Normalizations.norm_zscore!","category":"page"},{"location":"functions.html#FluxExtra.Normalizations.norm_zscore!","page":"Functions","title":"FluxExtra.Normalizations.norm_zscore!","text":"norm_zscore!(data::T,mean_vals::T,std_vals::T) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nSubtracts the mean and divides by the standard deviation of each feature (last dimension).\n\n\n\n\n\nnorm_zscore!(data::Vector{T}) where {F<:AbstractFloat,N,T<:Array{F,N}}\n\nSubtracts the mean and divides by the standard deviation of each feature (last dimension).  Returns mean and standard deviation values for each feature.\n\n\n\n\n\n","category":"function"},{"location":"functions.html#Other","page":"Functions","title":"Other","text":"","category":"section"},{"location":"functions.html","page":"Functions","title":"Functions","text":"Makes Flux.Parallel layer type stable when used with tuples.","category":"page"},{"location":"layers.html#Normalizations","page":"Layers","title":"Normalizations","text":"","category":"section"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Join","category":"page"},{"location":"layers.html#FluxExtra.Join","page":"Layers","title":"FluxExtra.Join","text":"Join(dim::Int64)\nJoin(dim = dim::Int64)\n\nConcatenates a tuple of arrays along a dimension dim. A convenient and type stable way of using x -> cat(x..., dims = dim).\n\n\n\n\n\n","category":"type"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Split","category":"page"},{"location":"layers.html#FluxExtra.Split","page":"Layers","title":"FluxExtra.Split","text":"Split(outputs::Int64, dim::Int64)\nSplit(outputs::Int64, dim = dim::Int64)\n\nBreaks an array into a number of arrays which is equal to outputs along a dimension dim. dim should we divisible by outputs without a remainder.\n\n\n\n\n\n","category":"type"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Addition","category":"page"},{"location":"layers.html#FluxExtra.Addition","page":"Layers","title":"FluxExtra.Addition","text":"Addition()\n\nA convenient way of using x -> sum(x).\n\n\n\n\n\n","category":"type"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Activation","category":"page"},{"location":"layers.html#FluxExtra.Activation","page":"Layers","title":"FluxExtra.Activation","text":"Activation(f::Function)\n\nA convenient way of using x -> f(x).\n\n\n\n\n\n","category":"type"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Flatten","category":"page"},{"location":"layers.html#FluxExtra.Flatten","page":"Layers","title":"FluxExtra.Flatten","text":"Flatten()\n\nFlattens an array. A convenient way of using x -> Flux.flatten(x).\n\n\n\n\n\n","category":"type"},{"location":"layers.html","page":"Layers","title":"Layers","text":"    Identity","category":"page"},{"location":"layers.html#FluxExtra.Identity","page":"Layers","title":"FluxExtra.Identity","text":"Identity()\n\nReturns its input without changes. Should be used with a Parallel layer if one wants to have a branch that does not change its input.\n\n\n\n\n\n","category":"type"},{"location":"index.html#FluxExtra","page":"Home","title":"FluxExtra","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Additional layers and functions for the Flux.jl machine learning library.","category":"page"}]
}
